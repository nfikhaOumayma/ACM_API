# ===============================
# SERVICE PARAMS
# ===============================
server.port =8080
spring.application.name=proxy-service

## Starting the connection
zuul.host.connect-timeout-millis=600000
## monitor the continuous incoming data flow by this we instruct Spring boot to wait response 
## for 30000 ms unless Zuuls internal Hystrix timeout will kickoff and showing you the error
zuul.host.socket-timeout-millis=600000
zuul.host.max-total-connections=1000
zuul.host.max-per-route-connections=100
zuul.ribbon-isolation-strategy=THREAD
zuul.thread-pool.use-separate-thread-pools=true

## Connect timeout used by Apache HttpClient
ribbon.ConnectTimeout=600000
## Read timeout used by Apache HttpClient
ribbon.ReadTimeout=600000
## Max number of retries on the same server (excluding the first try)
ribbon.MaxAutoRetries=0
## Whether all operations can be retried for this client
ribbon.OkToRetryOnAllOperations=true
## Max number of next servers to retry (excluding the first server)
ribbon.MaxAutoRetriesNextServer=3
## Interval to refresh the server list from the source
#ribbon.ServerListRefreshInterval=2000
 
## Set here for 10 seconds
##ribbon.connectionTimeout is 5000 |  ribbon.readTimeout is 15000 | ribbon.maxAutoRetries is 0 (default) | ribbon.maxAutoRetriesNextServer is 1 (default)
##So the hystrixTimeout should be: (5000 + 15000)  (1 + 0)  (1 + 1) // -> 40000 m
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=4800000
## Turn off the exception attribute that occurs over time
#hystrix.command.default.execution.timeout.enabled=false
## Disable feign hystrix
#feign.hystrix.enabled=false
##defualt threadpool config
hystrix.threadpool.default.coreSize = 200
hystrix.threadpool.default.maximumSize = 200

##load balancing for credit service
zuul.routes.credit-service.serviceId=credit-service
##load balancing for transvers service
zuul.routes.transvers-service.serviceId=transvers-service
# Load balancing strategy : Service provider is the name of the called service
##For this rule, each server is given a weight according to its average response time. The longer the response time, 
##the less weight it will get. The rule randomly picks a server where the possibility is determined by server's weight.
credit-service.ribbon.NFLoadBalancerRuleClassName=com.netflix.loadbalancer.WeightedResponseTimeRule
# Load balancing strategy : Service provider is the name of the called service
##For this rule, each server is given a weight according to its average response time. The longer the response time, 
##the less weight it will get. The rule randomly picks a server where the possibility is determined by server's weight.
transvers-service.ribbon.NFLoadBalancerRuleClassName=com.netflix.loadbalancer.WeightedResponseTimeRule

## Server connections configuration
server.tomcat.max-threads=250
## 100KB
server.max-http-header-size=100000
## 100KB
server.tomcat.max-http-header-size=100000

# ===============================
# DEPLOIMENT CONFIG
# ===============================
spring.cloud.config.uri=http://config-service:8888
eureka.client.service-url.defaultZone=http://discovery-service:8761/eureka/
# EUREKA SERVER CLIENT
eureka.instance.hostname=proxy-service
eureka.client.fetch-registry=true
eureka.client.register-with-eureka=true

# ===============================
# SECURITY CONFIG
# ===============================
security.oauth2.resource.user-info-uri=http://authentication-service:9999/users/principal

# ===============================
## MULTIPART (MultipartProperties)
# Enable multipart uploads
# ===============================
spring.servlet.multipart.enabled=true
spring.servlet.multipart.max-file-size=50MB
spring.servlet.multipart.max-request-size=100MB
spring.servlet.multipart.location=${user.home}/ged/temp

# ===============================
# Monitoring with prometheus and grafana 
# ===============================
management.endpoint.metrics.enabled=true
management.endpoints.web.exposure.include=*
management.endpoints.web.exposure.exclude=env
management.endpoint.health.show-details=always
management.endpoint.prometheus.enabled=true
management.metrics.export.prometheus.enabled=true
