# ===============================
# SERVICE PARAMS
# ===============================
server.port=8091
spring.application.name =parametrage-service
spring.cloud.config.uri = http://localhost:8888

## LOG LEVEL for ALL classes
#logging.level.root=DEBUG
## LOG LEVEL for package com.acm
logging.level.com.acm=DEBUG

zuul.host.connect-timeout-millis=600000
zuul.host.socket-timeout-millis=600000
eureka.client.register-with-eureka=true
eureka.client.service-url.defaultZone= http://localhost:8761/eureka/
eureka.client.fetch-registry=true
# ===============================
# DATA BASE PARAMS - SQL Server using Mssql-jdbc Driver
# ===============================
spring.datasource.driver-class-name=com.microsoft.sqlserver.jdbc.SQLServerDriver
spring.datasource.url=jdbc:sqlserver://localhost:1433;databaseName=ACM_ZTM_Integration;sendStringParametersAsUnicode=false
spring.datasource.username=sa
spring.datasource.password=sql
spring.jpa.show-sql=true
spring.datasource.sql-script-encoding=UTF-8

# To see some statistics
#spring.jpa.properties.hibernate.generate_statistics=true
# A non-zero value enables use of JDBC2 batch updates by Hibernate (e.g. recommended values between 5 and 30)
spring.jpa.properties.hibernate.jdbc.batch_size=30
# This is used to order insert statements so that they are batched together
spring.jpa.properties.hibernate.order_inserts=true
# This is used to order update statements so that they are batched together
spring.jpa.properties.hibernate.order_updates=true

#maximum number of milliseconds that a client will wait for a connection 30000ms (30 seconds)
spring.datasource.hikari.connectionTimeout = 60000
#maximum pool size
spring.datasource.hikari.maximumPoolSize=50
#maximum idle time for connection 600000 (10 min)
spring.datasource.hikari.idleTimeout=600000
# maximum lifetime in milliseconds of a connection in the pool after it is closed 1800000 (30 minutes).
spring.datasource.hikari.maxLifetime= 600000
## LOG debug TRACE
#logging.level.com.zaxxer.hikari.HikariConfig=DEBUG 
#logging.level.com.zaxxer.hikari=TRACE

spring.datasource.test-on-borrow=true
spring.datasource.validation-query=SELECT 1

## Hibernate Properties
# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.SQLServer2012Dialect
# Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto = none

# Spring also automatically run batch jobs configured. To disable auto-run of jobs
spring.batch.job.enabled=false
spring.batch.initialize-schema=always

# ===============================
# SECURITY CONFIG
# ===============================
security.oauth2.resource.user-info-uri=http://localhost:9999/users/principal

# ===============================
## MULTIPART (MultipartProperties)
# Enable multipart uploads
# ===============================
spring.servlet.multipart.enabled=true
spring.servlet.multipart.max-file-size=5MB
spring.servlet.multipart.max-request-size=100MB
spring.servlet.multipart.location=${user.home}/ged/temp

# ===============================
# Monitoring with prometheus and grafana 
# ===============================
management.endpoint.metrics.enabled=true
management.endpoints.web.exposure.include=*
management.endpoints.web.exposure.exclude=env
management.endpoint.health.show-details=always
management.endpoint.prometheus.enabled=true
management.metrics.export.prometheus.enabled=true



# ===============================
# Orange SMS configuration
# ===============================
rest.api.sms.service.send.url = https://api.orange.com/smsmessaging/v1/outbound/tel:+21627379042/requests
rest.api.sms.service.login = https://api.orange.com/oauth/v3/token
rest.api.sms.service.authorizationKey =Basic UGlBRzA3VG40SEd6aEJWdDBFYWpoYkQxZVV6NEFsNjY6bElBMVo0cXViSVlyd1RLUw==
rest.api.sms.service.sender.phone.number = +21627379042

# ===============================
# CONFIG PROPERTIES
# ===============================
com.acm.storage-location= file:${user.home}/acm_reports

# ===============================
##  cron scheduling (CONFIG ENV. DEV)
# ===============================
# "0 0/5 * * * ?" = run job Every 60 mins of every day.
cron.expression.loans.load=0 0/60 * * * ?

# "0 0 * * * *" = run job at fire at 8 am every day.
cron.expression.users.load=0 0 8 * * *

# urlServeurAuthentification : localhost
url.serveur.authentification=http://localhost:9999

# "0 0/5 * * * ?" = run job Every 5 mins of every day.
cron.expression.udf.load=0 0/3 * * * ?

# "0 0/5 * * * ?" = run job Every 5 mins of every day.
cron.expression.address.load=0 0/5 * * * ?

# ===============================
##  endpoint websocket
# ===============================
# urlEndpointWebsocket : localhost
url.endpoint.websocket=http://localhost:4200
# ===============================
##  cron
# ===============================
# run every 1 hours
cron.expression.loansOfSanad.batch=0 0 0/1 * * ?

# ===============================
##  Ib Environment
# ===============================
ib.environment.oauthUrl = http://172.16.4.103:9899/
ib.environment.apiUrl = http://172.16.4.103:8080/


