# ===============================
# SERVICE PARAMS
# ===============================
server.port=8093
spring.application.name =transvers-service

zuul.host.connect-timeout-millis=600000
zuul.host.socket-timeout-millis=600000
# ===============================
# DATA BASE PARAMS - SQL Server using Mssql-jdbc Driver
# ===============================
spring.datasource.driver-class-name=com.microsoft.sqlserver.jdbc.SQLServerDriver
spring.datasource.url=jdbc:sqlserver://10.0.0.153:1433;databaseName=ABACUS_UAT
spring.datasource.username=acm
spring.datasource.password=Talys*Sanad*2023
spring.jpa.show-sql=false
spring.datasource.sql-script-encoding=UTF-8



#maximum number of milliseconds that a client will wait for a connection 30000ms (30 seconds)
spring.datasource.hikari.connectionTimeout = 60000
#maximum pool size
spring.datasource.hikari.maximumPoolSize=50
#maximum idle time for connection 600000 (10 min)
spring.datasource.hikari.idleTimeout=600000
# maximum lifetime in milliseconds of a connection in the pool after it is closed 1800000 (30 minutes).
spring.datasource.hikari.maxLifetime= 600000
## LOG debug TRACE
#logging.level.com.zaxxer.hikari.HikariConfig=DEBUG 
#logging.level.com.zaxxer.hikari=TRACE

spring.datasource.test-on-borrow=true
spring.datasource.validation-query=SELECT 1

## Hibernate Properties
# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.SQLServer2012Dialect

# Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto = none

# ===============================
# DEPLOIMENT CONFIG
# ===============================
eureka.instance.hostname=transvers-service
spring.cloud.config.uri=http://config-service:8888
eureka.client.fetch-registry=true
eureka.client.register-with-eureka=true
eureka.client.service-url.defaultZone=http://discovery-service:8761/eureka/

# ===============================
# SECURITY CONFIG
# ===============================
security.oauth2.resource.user-info-uri=http://authentication-service:9999/users/principal

# ===============================
# Monitoring with prometheus and grafana 
# ===============================
management.endpoint.metrics.enabled=true
management.endpoints.web.exposure.include=*
management.endpoints.web.exposure.exclude=env
management.endpoint.health.show-details=always
management.endpoint.prometheus.enabled=true
management.metrics.export.prometheus.enabled=true

# ===============================
# API ABACUS PARAMS
# ===============================
rest.api.abacus.url.server=https://10.0.0.153:8182

# AUTHENTIFICATION
# ===============================
rest.api.abacus.authentification.uri=/api/login
rest.api.abacus.authentification.login=administrator
rest.api.abacus.authentification.pass=12345
rest.api.abacus.authentification.device.id=default

# LOAN
# ===============================
# CANCEL LOAN 
rest.api.abacus.loan.cancel.uri=/api/loan/cancel/
# CALCULATE LOAN 
rest.api.abacus.loan.calculate.uri=/api/loan/calculate
# Add Loan : POST api/loan 
rest.api.abacus.loan.add.uri=/api/loan
# Update Loan : PUT api/loan/{id}/details
rest.api.abacus.loan.update.uri.part1=/api/loan/
rest.api.abacus.loan.update.uri.part2=/details
# Add loan guarantor : POST api/loan/guarantor/{id} 
rest.api.abacus.loan.guarantor.add.uri=/api/loan/guarantor/
# Effective interest Calculation : POST api/loan/calculateeffectiveinterestrate
rest.api.abacus.loan.calculate.effectiveinterestrate.uri=/api/loan/calculateeffectiveinterestrate
# Loan Approval :PUT api/loan/{id}/processes 
rest.api.abacus.loan.approval.uri.part1=/api/loan/
rest.api.abacus.loan.approval.uri.part2=/processes
# Schedule Edit for new loan : POST api/loan/scheduleedit
rest.api.abacus.loan.schedule.edit.new.uri=/api/loan/scheduleedit
# Schedule Edit for applyed loans : PUT api/loan/{id}/schedule
rest.api.abacus.loan.schedule.edit.applyed.uri.part1=/api/loan/
rest.api.abacus.loan.schedule.edit.applyed.uri.part2=/schedule
# Loan Refinance : PUT api/loan/refinance/{id}
rest.api.abacus.loan.refinance.uri=/api/loan/refinance/{id}
# GET LOAN : GET api/loan/{id} 
rest.api.abacus.loan.get.uri=/api/loan/
# CUSTOMER
# ===============================
# Add customer : POST api/customer 
rest.api.abacus.customer.add.uri=/api/customer
# Update Customer : PUT api/customer/{id} 
rest.api.abacus.customer.update.uri=/api/customer/
# GET Customer : GET api/customer/{id} 
rest.api.abacus.customer.get.uri=/api/customer/
# EXPENSES
#=================================
# Create Expenses Journal Page : POST /api/importjournal
rest.api.abacus.journal.page.create.uri= /api/importjournal
# Post Expenses Journal Page : POST /api/journalpage
rest.api.abacus.journal.page.post.uri=/api/journalpage
# COLLATERAL
#=================================
# Create CuLoanCollateral : POST api/culoancollateral
rest.api.abacus.loan.collateral.add.uri= /api/culoancollateral
# PUT loan refinance : PUT api/loan/refinance/{cuAccountID}
rest.api.abacus.refinance.add.uri= /api/loan/refinance/

# JOURNAL ENTRIES JSON
#=================================
rest.api.abacus.journal.entry.post.uri = /api/journalentries

# RABBITMQ CONFIG
#=================================
spring.rabbitmq.host=10.0.0.26
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest
ib.rabbitmq.exchange=ib.uat_sanad-exchange
 
ib.rabbitmq.customer.routingKey=key.customer
ib.rabbitmq.loan.routingKey=key.loan
ib.rabbitmq.customer=ib.uat_sanad-customer
ib.rabbitmq.loan=ib.uat_sanad-loan
ib.rabbitmq.validate.loan=ib.uat_sanad-validateLoan
ib.rabbitmq.validate.loan.routingKey=key.loan.validate

ib.rabbitmq.loan.schedules=ib.uat_sanad-loanSchedules

ib.rabbitmq.cancel.loan=ib.uat_sanad-cancelLoan
ib.rabbitmq.paymentLoan.routingKey=key.paymentLoan
ib.rabbitmq.paymentLoan=ib.uat_sanad-payment-loan

# urlServeurAuthentification : URL env. tamkeen
url.serveur.authentification=http://10.0.0.252:9999
# PAYMENT LOAN JSON
#=================================
rest.api.abacus.payment.loan.post.uri = /api/transaction/loan/deposit

# CHARGE FEES
#=================================
rest.api.abacus.charge.fee.post.uri =/api/transaction/chargepayfee/
rest.api.abacus.charge.fee.get.uri =/api/receipt/initialize/
rest.api.abacus.charge.fee.recipt.type =?ReceiptTypeSearch=16384
